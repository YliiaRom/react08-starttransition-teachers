import { startTransition, useOptimistic, useState } from "react";
import bgImg from "../../assets/img/user.jpg";
import styles from "./StylesTask.module.css";

const fakeApi = {
  //--—Å—Ç–≤–æ—Ä—é—î–º–æ –º–µ—Ç–æ–¥ add –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó api
  add: async (text) => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        if (Math.random() < 0.2) {
          reject(new Error(`–ü–æ–º—ñ–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è!`));
        } else {
          const newTodo = { id: Date.now(), text };
          console.log(`–Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ: —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ`, newTodo);
          resolve(newTodo);
        }
      }, 2000);
    });
  },
};

function UseOptimisticChat() {
  const [isOpen, setIsOpen] = useState(false);
  const [isVisible, setIsVisible] = useState(false);
  const [valueMessage, setValueMessage] = useState("");
  const [messages, setMessage] = useState(() => []);

  const [optimisticMessage, addOptimisticMessage] = useOptimistic(
    messages,
    (currentMessages, optMessageObj) => [...currentMessages, optMessageObj]
  );

  //-- sendMessageToServer
  const sendMessageToServer = async (tempId, valueMessage) => {
    try {
      const savedMessage = await fakeApi.add(valueMessage);
      setMessage((prev) => [
        ...prev.filter((msg) => msg.id !== tempId),
        savedMessage,
      ]);
    } catch (err) {
      console.error(err.message);
      alert('"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è"- –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞');
      setMessage((prev) => prev.filter((msg) => msg.id !== tempId));
    }
  };

  //-----–ø—Ä–∞—Ü—é—î –∫–Ω–æ–ø–∫–∞
  const handleSend = (valueMessage) => {
    const tempId = Date.now();

    //---optimisticMessage /—Ä–æ–±–∏—Ç—å {}
    const optimisticMessage = { id: tempId, valueMessage, pending: true };

    startTransition(async () => {
      //---addOptimisticMessage /  –≤ f –ø–µ—Ä–µ–¥–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è
      addOptimisticMessage(optimisticMessage);
      await sendMessageToServer(tempId, valueMessage);
    });
  };
  return (
    <div className="sectionWrap02" style={{ backgroundImage: `url(${bgImg})` }}>
      <div className="description">
        <h2>useOptimistic()</h2>

        <p className="decorNum">2</p>
        <div>
          <p>
            –°—Ç–≤–æ—Ä–∏—Ç–∏ f - —è–∫—â–æ —Å–º—Å –¥–æ–¥–∞—î—Ç—å—Å—è &lt; 0.2s -—Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ–¥–∞—Å—Ç—å –¥–æ
            —ñ–Ω—à–∏—Ö —Å–º—Å (—Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è &#123;id: Date.now(), text&#125;)
          </p>
          <p>–í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –æ–±—ñ—Ü—è–Ω–∫—É –Ω–∞—á–µ –≤—Å–µ –æ–∫- –ø–æ–∫–∏ –∑–∞–≥—Ä—É–∂–∞—î</p>
        </div>
        <div onClick={() => setIsVisible((v) => !v)} className="more">
          CODE
        </div>
        {isVisible && (
          <div className="moreBody">
            <h2>–ó–∞–º—ñ–Ω–∞ –æ–±—ñ—Ü—è–Ω–∫–∏ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —Å–µ—Ä–≤–µ—Ä–∞</h2>
            <p>
              const savedMessage = await fakeApi.add(valueMessage);
              <br />
              setMessage((prev) =&gt; [<br /> ...prev.filter((msg) =&gt; msg.id
              !== tempId),
              <br />
              savedMessage, ]);
            </p>
          </div>
        )}
      </div>

      {/* =====================rez */}
      <div className="solution">
        <h2>
          <span style={{ fontSize: "60px" }}>üí¨</span>—á–∞—Ç <br />
          —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–≤–∏—Ç–∏—Å—å –≤–æ –≤–∫–ª–∞–¥—Ü—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ (Components)
        </h2>

        <label>
          –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç
          <input
            type="text"
            placeholder="sms..."
            onChange={(e) => setValueMessage(e.target.value)}
          />
        </label>
        <button onClick={() => handleSend(valueMessage)}>–ù–∞–¥—ñ—Å–ª–∞—Ç–∏</button>

        <ul className={styles.messageBox}>
          <li key="first-item">üí¨ Hello...</li>
          {optimisticMessage.map((msg) => (
            <li key={msg.id}>
              {msg.text}
              {msg.pending && <p>{valueMessage}(–≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è ...)</p>}
            </li>
          ))}
        </ul>
        <h2>
          –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–≤–æ–¥–∏—Ç—å —Ö—É–∫ useOptimistic()/ –∫–æ–ª–∏ —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ —Å–µ—Ä–≤–µ—Ä–∞
          –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–º—ñ–Ω—é—î—Ç—å—Å—è
        </h2>
        <hr />
        <div className="more" onClick={() => setIsOpen((v) => !v)}>
          Server
        </div>
        {isOpen && (
          <div className="moreBody">
            <p>
              const fakeApi = &#123; <br />
              add: async (text) =&gt; &#123;
              <br />
              return new Promise((resolve, reject) =&gt; &#123;
              <br />
              setTimeout(() =&gt; &#123;
              <br />
              if (Math.random() &lt; 0.2) &#123;
              <br />
              reject(new Error(`–ü–æ–º—ñ–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è!`));
              <br />
              &#125; else &#123;
              <br />
              const newTodo = &#123; id: Date.now(), text &#125;;
              <br />
              console.log(`–Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ: —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ`, newTodo);
              <br />
              resolve(newTodo);
              <br />
              &#125;
              <br />
              &#125;, 2000);
              <br />
              &#125;);
              <br />
              &#125;,
              <br />
              &#125;;
            </p>
          </div>
        )}
      </div>
    </div>
  );
}
export default UseOptimisticChat;
